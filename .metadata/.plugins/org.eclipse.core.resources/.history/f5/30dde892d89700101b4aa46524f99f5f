/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.9/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    `java-library`
    `java`
    `jacoco`
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    mavenLocal()
    google()
}

dependencies {
    testImplementation("net.jqwik:jqwik:1.9.3")      // or latest
    testImplementation(platform("org.junit:junit-bom:5.10.2"))
    testImplementation("org.junit.jupiter:junit-jupiter")
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.junit.vintage:junit-vintage-engine")
    testImplementation("org.assertj:assertj-core:3.26.0")
    testImplementation("org.mockito:mockito-junit-jupiter:5.14.2")

    // Use JUnit Jupiter for testing.
    //testImplementation("libs.junit.jupiter")

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is exported to consumers, that is to say found on their compile classpath.
//    api(libs.commons.math3)

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
//    implementation(libs.guava)
}

// Apply a specific Java toolchain to ease working on different environments.
//java {
//    toolchain {
//        languageVersion = JavaLanguageVersion.of(21)
//    }
//}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    testLogging {
        events("started", "skipped", "passed", "failed")
        showStandardStreams = true
    }
}



val randoopJar = files("libs/randoop-all-4.3.4.jar") // adjust if different

tasks.register<JavaExec>("randoop") {
    group = "verification"
    description = "Generate JUnit tests with Randoop"
    dependsOn(tasks.named("build"))

    // Randoop main class
    mainClass.set("randoop.main.Main")

    // Use Gradle's runtime classpath + the Randoop jar
    classpath = files(sourceSets.main.get().runtimeClasspath, randoopJar)

    // Make sure the output directory exists
    doFirst { file("build/sumaListasDigitos/randoop").mkdirs() }

    // Prefer a *relative* classlist path to avoid Windows quoting issues
    val classList = file("classes.txt").absolutePath

    args(
        "gentests",
        "--usethreads=true",
        "--classlist=$classList",
        "--time-limit=60",
        "--junit-output-dir=${file("build/sumaListasDigitos/randoop").absolutePath}",
        "--regression-test-basename=SumaListasDigitosReg",
        "--error-test-basename=SumaListasDigitosErr",
        "--only-test-public-members=true",
/*        "--flaky-test-behavior=HALT",*/
        "--flaky-test-behavior=DISCARD",
/*        "--deterministic",*/
        "--log=${file("build/randoop.log").absolutePath}" // helpful if something goes wrong
    )
}

buildscript {
    dependencies {
        classpath("org.jacoco:org.jacoco.core:0.8.12") // Use the latest version
    }
    repositories {
        google()
    }
}

jacoco {
    toolVersion = "0.8.12"
}

tasks.test {
    useJUnitPlatform()
    testLogging {
        events("started", "skipped", "passed", "failed")
        showStandardStreams = true
    }
    finalizedBy(tasks.jacocoTestReport) // genera el informe al acabar los tests
}

tasks.jacocoTestReport {
    dependsOn(tasks.test) // primero correr los tests
    reports {
        xml.required.set(true)
        html.required.set(true)   // este es el informe que abres en el navegador
        csv.required.set(false)
    }
}
