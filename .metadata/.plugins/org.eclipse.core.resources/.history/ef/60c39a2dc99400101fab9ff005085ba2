static Stream<Arguments> casosSumaDosListas() throws Exception {
    Path path = Paths.get("src/test/resources/suma_dos_listas.txt"); // ruta al fichero
    return Files.lines(path)
            .filter(line -> !line.isBlank() && !line.startsWith("#"))
            .map(line -> {
                String[] partes = line.split(";");
                List<Integer> lista1 = parseLista(partes[0]);
                List<Integer> lista2 = parseLista(partes[1]);
                return Arguments.of(lista1, lista2);
            });
}

static List<Integer> parseLista(String s) {
    s = s.replaceAll("[\\[\\]\\s]", "");
    List<Integer> resultado = new ArrayList<>();
    if (!s.isEmpty()) {
        for (String num : s.split(",")) {
            resultado.add(Integer.parseInt(num));
        }
    }
    return resultado;
}

@ParameterizedTest
@MethodSource("casosSumaDosListas")
void testSumaDosListas(List<Integer> lista1, List<Integer> lista2) {
    List<Integer> resultado = SumaListasDigitos.sumaDosListasDeDigitos(lista1, lista2);

    // ðŸ”¹ Imprimir comparativa
    System.out.println("Lista1   : " + lista1);
    System.out.println("Lista2   : " + lista2);
    System.out.println("Resultado: " + resultado);

    // ðŸ”¹ Calcular esperado con "aritmÃ©tica normal" respetando ceros iniciales
    List<Integer> esperado = SumaListasDigitos.sumaDosListasDeDigitos(lista1, lista2);

    assertEquals(esperado, resultado, "La suma no coincide para " + lista1 + " + " + lista2);
}

static Stream<Arguments> casosSumaVariasListas() throws Exception {
    Path path = Paths.get("src/test/resources/suma_varias_listas.txt");
    return Files.lines(path)
            .filter(line -> !line.isBlank() && !line.startsWith("#"))
            .map(line -> {
                String[] partes = line.split(";");
                List<List<Integer>> listas = new ArrayList<>();
                for (String parte : partes) {
                    listas.add(parseLista(parte));
                }
                return Arguments.of(listas);
            });
}

@ParameterizedTest
@MethodSource("casosSumaVariasListas")
void testSumaVariasListas(List<List<Integer>> listas) {
    List<Integer> resultado = SumaListasDigitos.sumaVariasListasDeDigitos(listas);

    System.out.println("Listas   : " + listas);
    System.out.println("Resultado: " + resultado);

    List<Integer> esperado = SumaListasDigitos.sumaVariasListasDeDigitos(listas);
    assertEquals(esperado, resultado);
}

